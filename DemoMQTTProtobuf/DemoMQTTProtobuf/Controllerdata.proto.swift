/// Generated by the Protocol Buffers 3.3.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.21
/// Source file "controllerdata.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ControllerdataRoot {
    public static let `default` = ControllerdataRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class ControllerData : GeneratedMessage {
    public typealias BuilderType = ControllerData.Builder

    public static func == (lhs: ControllerData, rhs: ControllerData) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIdentifier == rhs.hasIdentifier) && (!lhs.hasIdentifier || lhs.identifier == rhs.identifier)
        fieldCheck = fieldCheck && (lhs.hasOrigin == rhs.hasOrigin) && (!lhs.hasOrigin || lhs.origin == rhs.origin)
        fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var identifier:String! = nil
    public fileprivate(set) var hasIdentifier:Bool = false

    public fileprivate(set) var origin:String! = nil
    public fileprivate(set) var hasOrigin:Bool = false

    public fileprivate(set) var data:String! = nil
    public fileprivate(set) var hasData:Bool = false

    required public init() {
        super.init()
    }
    public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIdentifier {
            try codedOutputStream.writeString(fieldNumber: 1, value:identifier)
        }
        if hasOrigin {
            try codedOutputStream.writeString(fieldNumber: 2, value:origin)
        }
        if hasData {
            try codedOutputStream.writeString(fieldNumber: 3, value:data)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIdentifier {
            serialize_size += identifier.computeStringSize(fieldNumber: 1)
        }
        if hasOrigin {
            serialize_size += origin.computeStringSize(fieldNumber: 2)
        }
        if hasData {
            serialize_size += data.computeStringSize(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ControllerData.Builder {
        return ControllerData.classBuilder() as! ControllerData.Builder
    }
    public func getBuilder() -> ControllerData.Builder {
        return classBuilder() as! ControllerData.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ControllerData.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ControllerData.Builder()
    }
    public func toBuilder() throws -> ControllerData.Builder {
        return try ControllerData.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ControllerData) throws -> ControllerData.Builder {
        return try ControllerData.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIdentifier {
            jsonMap["identifier"] = identifier
        }
        if hasOrigin {
            jsonMap["origin"] = origin
        }
        if hasData {
            jsonMap["data"] = data
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ControllerData {
        return try ControllerData.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> ControllerData {
        return try ControllerData.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIdentifier {
            output += "\(indent) identifier: \(identifier) \n"
        }
        if hasOrigin {
            output += "\(indent) origin: \(origin) \n"
        }
        if hasData {
            output += "\(indent) data: \(data) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIdentifier {
                hashCode = (hashCode &* 31) &+ identifier.hashValue
            }
            if hasOrigin {
                hashCode = (hashCode &* 31) &+ origin.hashValue
            }
            if hasData {
                hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ControllerData"
    }
    override public func className() -> String {
        return "ControllerData"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ControllerData = ControllerData()
        public func getMessage() -> ControllerData {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var identifier:String {
            get {
                return builderResult.identifier
            }
            set (value) {
                builderResult.hasIdentifier = true
                builderResult.identifier = value
            }
        }
        public var hasIdentifier:Bool {
            get {
                return builderResult.hasIdentifier
            }
        }
        @discardableResult
        public func setIdentifier(_ value:String) -> ControllerData.Builder {
            self.identifier = value
            return self
        }
        @discardableResult
        public func clearIdentifier() -> ControllerData.Builder{
            builderResult.hasIdentifier = false
            builderResult.identifier = nil
            return self
        }
        public var origin:String {
            get {
                return builderResult.origin
            }
            set (value) {
                builderResult.hasOrigin = true
                builderResult.origin = value
            }
        }
        public var hasOrigin:Bool {
            get {
                return builderResult.hasOrigin
            }
        }
        @discardableResult
        public func setOrigin(_ value:String) -> ControllerData.Builder {
            self.origin = value
            return self
        }
        @discardableResult
        public func clearOrigin() -> ControllerData.Builder{
            builderResult.hasOrigin = false
            builderResult.origin = nil
            return self
        }
        public var data:String {
            get {
                return builderResult.data
            }
            set (value) {
                builderResult.hasData = true
                builderResult.data = value
            }
        }
        public var hasData:Bool {
            get {
                return builderResult.hasData
            }
        }
        @discardableResult
        public func setData(_ value:String) -> ControllerData.Builder {
            self.data = value
            return self
        }
        @discardableResult
        public func clearData() -> ControllerData.Builder{
            builderResult.hasData = false
            builderResult.data = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ControllerData.Builder {
            builderResult = ControllerData()
            return self
        }
        override public func clone() throws -> ControllerData.Builder {
            return try ControllerData.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ControllerData {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ControllerData {
            let returnMe:ControllerData = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ControllerData) throws -> ControllerData.Builder {
            if other == ControllerData() {
                return self
            }
            if other.hasIdentifier {
                identifier = other.identifier
            }
            if other.hasOrigin {
                origin = other.origin
            }
            if other.hasData {
                data = other.data
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ControllerData.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ControllerData.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    identifier = try codedInputStream.readString()

                case 18:
                    origin = try codedInputStream.readString()

                case 26:
                    data = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ControllerData.Builder {
            let resultDecodedBuilder = ControllerData.Builder()
            if let jsonValueIdentifier = jsonMap["identifier"] as? String {
                resultDecodedBuilder.identifier = jsonValueIdentifier
            }
            if let jsonValueOrigin = jsonMap["origin"] as? String {
                resultDecodedBuilder.origin = jsonValueOrigin
            }
            if let jsonValueData = jsonMap["data"] as? String {
                resultDecodedBuilder.data = jsonValueData
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> ControllerData.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ControllerData.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension ControllerData: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ControllerData> {
        var mergedArray = Array<ControllerData>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ControllerData? {
        return try ControllerData.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ControllerData {
        return try ControllerData.Builder().mergeFrom(data: data, extensionRegistry:ControllerdataRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ControllerData {
        return try ControllerData.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ControllerData {
        return try ControllerData.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ControllerData {
        return try ControllerData.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ControllerData {
        return try ControllerData.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ControllerData {
        return try ControllerData.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "identifier": return self.identifier
        case "origin": return self.origin
        case "data": return self.data
        default: return nil
        }
    }
}
extension ControllerData.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ControllerData
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "identifier": return self.identifier
            case "origin": return self.origin
            case "data": return self.data
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "identifier":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.identifier = newSubscriptValue
            case "origin":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.origin = newSubscriptValue
            case "data":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.data = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
